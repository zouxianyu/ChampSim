#include <deque>
#include "cache.h"

#define IT_SIZE (256)
#define GHB_SIZE (256)
#define PREF_LOOKAHEAD (4)
#define PREF_DEGREE (4)
#define PREF_LAST (3)

struct ITEntry {
    uint64_t ip;
    uint64_t ghb_index;
};

struct GHBEntry {
    uint64_t cl_addr;
    uint64_t prev_index;
};

static ITEntry IT[IT_SIZE]{};
static GHBEntry GHB[GHB_SIZE]{};
static uint64_t GHB_head = 0;

static void update_IT_GHB(uint64_t ip, uint64_t cl_addr) {
    ITEntry &IT_entry = IT[ip % IT_SIZE];
    GHBEntry &GHB_entry = GHB[GHB_head % GHB_SIZE];

    // fix the single linked list at first
    if (IT_entry.ip == ip) {
        // the entry contains the same ip
        GHB_entry.prev_index = IT_entry.ghb_index;
        IT_entry.ghb_index = GHB_head;
    } else {
        // the entry contains a different ip
        GHB_entry.prev_index = -1;
        IT_entry.ip = ip;
        IT_entry.ghb_index = GHB_head;
    }

    GHB_entry.cl_addr = cl_addr;
}

static bool is_valid_GHB_index(uint64_t index) {
    return (index != static_cast<uint64_t>(-1)) && 
           (GHB_head - index < GHB_SIZE);
}

static std::vector<uint64_t> get_accessed_cl_addrs() {
    std::vector<uint64_t> result;

    // loop through the GHB, save the single linked list to a vector
    uint64_t curr = GHB_head;
    while (is_valid_GHB_index(curr)) {
        GHBEntry &GHB_entry = GHB[curr % GHB_SIZE];
        result.push_back(GHB_entry.cl_addr);
        curr = GHB_entry.prev_index;
    }
    return result;
}

static std::vector<uint64_t> get_prefetch_cl_addrs(const std::vector<uint64_t> &cl_addrs) {
    std::vector<uint64_t> result;

    // make sure we have enough accessed addresses
    if (cl_addrs.size() < PREF_LAST) {
        return result;
    }

    // try to calculate the stride
    int64_t stride = cl_addrs[1] - cl_addrs[0];
    if (stride == 0) {
        return result;
    }

    for (size_t i = 1; i < PREF_LAST - 1; i++) {
        int64_t next_stride = cl_addrs[i + 1] - cl_addrs[i];
        if (next_stride != stride) {
            return result;
        }
    }

    // calculate the prefetch addresses
    for (int i = 0; i <= PREF_DEGREE; i++) {
        result.push_back(static_cast<int64_t>(cl_addrs[0]) + 
                         (PREF_LOOKAHEAD + i) * stride);
    }
    return result;
}

void CACHE::l2c_prefetcher_initialize() 
{

}

uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;
    update_IT_GHB(ip, cl_addr);
    std::vector<uint64_t> prefetch_cl_addrs = 
        get_prefetch_cl_addrs(get_accessed_cl_addrs());

    for (uint64_t prefetch_cl_addr : prefetch_cl_addrs) {
        prefetch_line(ip, addr, prefetch_cl_addr << LOG2_BLOCK_SIZE, FILL_L2, 0);
    }

    // dont forget to update the GHB head
    GHB_head++;

    return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
  return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats()
{

}
